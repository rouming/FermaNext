<?xml version="1.0"?> 
<project name="simple-tests" default="run-test" basedir="."> 
     <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
     <taskdef resource="cpptasks.tasks"/> 
     <typedef resource="cpptasks.types"/>

     <property name="src.dir" value="src"/> 
     <property name="objects.dir" value="obj"/>
     <property name="tests.dir" value="tests"/>
     <property name="build.dir" value="build"/>

     <condition property="is-windows">
         <equals arg1="${os.family}" arg2="windows"/>
     </condition>
     <condition property="is-unix">
         <equals arg1="${os.family}" arg2="unix"/>
     </condition>

     <condition property="os.executable.extension" value=".exe">
         <isset property="is-windows"/>
     </condition>
     <condition property="os.executable.extension" value="">
         <isset property="is-unix"/>
     </condition>

     <condition property="is-def-testcase" value="true">
         <not><equals arg1="${testcase}" arg2="$${testcase}"/></not>
     </condition>

     <mkdir dir="${objects.dir}"/>
     <mkdir dir="${tests.dir}"/>
     <mkdir dir="${build.dir}"/>


<!-- Subsidiary targets -->

     <target name="check-build-path">
        <property name="build-path" refid="build-path" />
        <if>
          <equals arg1="${build-path}" arg2=""/>
          <then>
             <fail>Can't find testcase: "${testcase}"</fail>
          </then>
        </if>
     </target>

     <target name="build-all-test" unless="is-def-testcase" >
        <foreach target="compile" 
                 param="file" 
                 inheritall="true"
                 inheritrefs="true">
           <path>
              <fileset dir="${src.dir}" includes="*.cpp" 
                       excludes="DijkstraTest.cpp"/>
           </path>
        </foreach>
     </target>

     <target name="run-all-test" unless="is-def-testcase" >
        <foreach target="execute" 
                 param="executable" 
                 inheritall="true"
                 inheritrefs="true">
           <path>
              <fileset dir="${tests.dir}"
                       excludes="*${os.executable.extension}.manifest"/>
           </path>
        </foreach>
     </target>

     <target name="build-testcase" if="is-def-testcase" >
        <foreach target="compile" 
                 param="file" 
                 inheritall="true"
                 inheritrefs="true">
           <path id="build-path">
              <fileset dir="${src.dir}" includes="${testcase}.cpp" 
                       excludes="DijkstraTest.cpp"/>
           </path>
        </foreach>

        <antcall target="check-build-path" 
                 inheritall="yes" inheritrefs="yes" />
     </target>

     <target name="run-testcase" if="is-def-testcase" >
        <foreach target="execute" 
                 param="executable" 
                 inheritall="true"
                 inheritrefs="true">
           <path id="build-path">
              <fileset dir="${tests.dir}" 
                       includes="${testcase}${os.executable.extension}"
                       excludes="${testcase}${os.executable.extension}.manifest" />

           </path>
        </foreach>

        <antcall target="check-build-path" 
                 inheritall="yes" inheritrefs="yes" />
     </target>

<!-- Main targets -->

     <target name="build-test" depends="build-all-test, build-testcase" >
     </target>

     <target name="run-test" depends="run-all-test, run-testcase">
     </target>

     <target name="clean-test" >
        <delete dir="${objects.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${tests.dir}"/>
        <delete>
            <fileset dir="." includes="*.pdb"/>
            <fileset dir="." includes="${outfile}${os.executable.extension}"/>
            <fileset dir="." includes="*.xml" excludes="build.xml"/>
        </delete>
     </target>

     <target name="compile">
          <basename property="src.file" file="${file}"/>
          <basename property="out.file" file="${src.file}" suffix=".cpp"/>

          <echo>Compiling ${src.file}</echo>

          <cc name="${compiler}"
              exceptions="true"
              rtti="true"
              subsystem="console"
              optimize="none"
              multithreaded="true"
              relentless="true"
              debug="false"
              outfile="${build.dir}/${out.file}"
              outtype="executable"
              objdir="${objects.dir}">

              <defineset define="QT_THREAD_SUPPORT"/>
              <defineset define="QT_XML_LIB"/>
              <defineset define="QT_CORE_LIB"/>
              <defineset define="QT_NETWORK_LIB"/>

              <!-- Windows define sets -->
              <defineset define="UNICODE" if="is-windows"/>
              <defineset define="WIN32" if="is-windows"/>

              <includepath refid="qt.includes"/>
              <includepath refid="agg.includes"/>
              <includepath refid="ferma.includes"/>

              <!-- UNIX compiler args -->
              <compilerarg value="-pipe" if="is-unix"/>
              <compilerarg value="-Wall" if="is-unix"/>
 
              <fileset dir="${src.dir}" includes="${src.file}"/>

              <linker name="${compiler}">
                 <linkerarg value="-export-dynamic" if="is-unix"/>

                 <libset libs="Common" dir="../../build/Release"  />

                 <!-- Windows Qt libsets -->
                 <libset libs="QtCore4, QtXml4, QtNetwork4" 
                         dir="${qt.dir}/lib" if="is-windows" />

                 <!-- UNIX Qt libsets -->
                 <libset libs="QtCore, QtXml, QtNetwork" if="is-unix" />

                 <!-- UNIX libsets -->
                 <libset libs="Xext" dir="/usr/X11R6/lib" if="is-unix"/>
                 <libset libs="X11" if="is-unix"/>
                 <libset libs="m" if="is-unix"/>
                 <libset libs="pthread" if="is-unix"/>
             </linker>
         </cc>

         <move file="${build.dir}/${out.file}${os.executable.extension}" 
               todir="${tests.dir}"/>

         <!-- For MSVS2005 -->
         <move todir="${tests.dir}">
           <fileset dir="${build.dir}" 
                    includes="${out.file}${os.executable.extension}.manifest"/>

         </move>
     </target>

     <target name="execute">
         <basename property="exec.file" file="${executable}"/>
         <echo>Executing ${tests.dir}/${exec.file}</echo>

         <exec resolveexecutable="Yes"
               dir="tests"
               failonerror="Yes"
               executable="${exec.file}">
         </exec>
     </target>

</project>
